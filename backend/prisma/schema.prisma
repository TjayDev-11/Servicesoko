generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  BOTH
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
  IN_PROGRESS
}

model User {
  id               String          @id @default(cuid())
  name             String          @db.VarChar(100)
  email            String?         @unique @db.VarChar(255)
  password         String          @db.VarChar(255)
  phone            String?         @unique @db.VarChar(20)
  location         String?
  bio              String?
  profilePhoto     String?         @db.VarChar(255)
  role             UserRole        @default(BUYER)
  sellerProfile    SellerProfile?
  orders           Order[]         @relation("UserToOrder")
  sellerOrders     Order[]         @relation("UserToSellerOrder")
  reviews          Review[]        @relation("UserToReview")
  serviceSellers   ServiceSeller[] @relation("UserToServiceSeller")
  sentMessages     Message[]       @relation("UserToSentMessages")
  receivedMessages Message[]       @relation("UserToReceivedMessages")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([email, phone])
  @@index([createdAt])
}

model SellerProfile {
  id             String          @id @default(cuid())
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String          @db.VarChar(100)
  phone          String?         @db.VarChar(20)
  location       String?         @db.VarChar(100)
  gender         String?         @db.VarChar(20)
  profilePhoto   String?         @db.VarChar(255)
  bio            String?
  experience     Int?
  services       String[]        @default([])
  isComplete     Boolean         @default(false)
  ratings        Int[]           @default([])
  serviceSellers ServiceSeller[] @relation("SellerProfileToServiceSeller")
  reviews        Review[]        @relation("SellerProfileToReview")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
}

model Service {
  id             String          @id @default(cuid())
  title          String          @db.VarChar(100)
  description    String?         @db.Text
  price          Float?
  categoryId     String?
  category       Category?       @relation(fields: [categoryId], references: [id])
  orders         Order[]
  serviceSellers ServiceSeller[] @relation("ServiceToServiceSeller")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([title, categoryId])
  @@index([categoryId])
  @@index([price])
}

model ServiceSeller {
  id            String        @id @default(uuid())
  serviceId     String
  service       Service       @relation("ServiceToServiceSeller", fields: [serviceId], references: [id])
  sellerId      String
  seller        User          @relation("UserToServiceSeller", fields: [sellerId], references: [id], onDelete: Cascade, map: "service_seller_user_fk")
  sellerProfile SellerProfile @relation("SellerProfileToServiceSeller", fields: [sellerId], references: [userId], map: "service_seller_profile_fk")
  description   String?       @db.Text
  experience    Int?
  price         Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([serviceId, sellerId])
  @@index([sellerId])
  @@index([price])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(50)
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  serviceId   String
  service     Service     @relation(fields: [serviceId], references: [id])
  buyerId     String
  buyer       User        @relation("UserToOrder", fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId    String
  seller      User        @relation("UserToSellerOrder", fields: [sellerId], references: [id], onDelete: Cascade)
  status      OrderStatus @default(PENDING)
  bookingDate DateTime?
  reviews     Review[]    @relation("OrderToReview")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status])
  @@index([buyerId])
  @@index([sellerId])
  @@index([createdAt])
}

model Review {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation("UserToReview", fields: [userId], references: [id], onDelete: Cascade)
  sellerId  String
  seller    SellerProfile @relation("SellerProfileToReview", fields: [sellerId], references: [userId])
  orderId   String
  order     Order         @relation("OrderToReview", fields: [orderId], references: [id])
  rating    Int
  comment   String?       @db.Text
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([sellerId])
  @@index([orderId])
  @@index([rating])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("UserToSentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("UserToReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
}

model DeletedUserLog {
  id          Int      @id @default(autoincrement())
  userId      String
  reason      String
  otherReason String?
  deletedAt   DateTime @default(now())
}